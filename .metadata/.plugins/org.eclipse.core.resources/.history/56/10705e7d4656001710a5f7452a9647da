<cfcomponent output="true" >
	<!---Intialise the Structure(ModifiedValue,ErrorMessage)--->
	<cfset sChangeAndError = {}/>
	<!---Function validates name and city fields--->
	<cffunction name="validateName" access="private" returntype="string">
	<cfargument type="string" required="true" name="fieldValue" />
		<cfif checkEmptyAndSpaces(fieldValue)>
			<cfreturn true>
		<cfelse>
			<cfset fieldValue = StructFind(form,arguments.field)>
			<cfset counter = 0>
			<cfloop from=1 to=#Len(fieldValue)# step=1 index="i">
				<cfset unicode = #Asc(mid(fieldValue,i,i))# />
				<cfif (unicode GTE 65 AND unicode LTE 90) OR (unicode GTE 97 AND unicode LTE 122) >
					<cfset counter = "#counter#" + 1 >
				</cfif>
			
			</cfloop>
		
			<cfif #counter# NEQ #Len(fieldValue)#>
				<cfset #generateErrors(field,"Name field dosen't contain letters")# />
				<cfreturn true>
			<cfelse>
				<cfreturn false>
			</cfif>
		</cfif>
	</cffunction>
	<!---Generates Erros and populates the structure errorMessages--->
	<cffunction name="generateErrors" access="private" output="true" returntype="void" >
		<cfargument type="string" name="field" required="true" >
		<cfargument type="string" name="errorMessage" required="false" default="This field cannot be empty">
		<cfset #StructUpdate(errorMessages,arguments.field,errorMessage)# />	 
		
	</cffunction>
	<!---Checks for empty fields and removes spaces in inputs--->
	<cffunction name="checkEmptyAndSpaces" access="private" returntype="string" output="true" >
		<cfargument type="string" required="true" name="fieldValue">
		
		<cfset temp = ""/>
		<cfloop from=1 to=#Len(fieldValue)# step=1 index="i">
			<cfset unicode = #Asc(mid(fieldValue,i,1))# />
			<cfset letter = #mid(fieldValue,i,1)# />
				
			<cfif unicode NEQ 32 AND unicode NEQ 9>
				<cfset temp = #temp# & letter />
				
			</cfif>
			
		</cfloop>
		
		
		<cfset StructInsert(sChangeAndError,temp,"") />
		<cfif #Len(temp)# EQ 0>
			<cfset generateErrors(temp) />
			<cfreturn true />
		<cfelse>
			<cfreturn false />
		</cfif>	
		
	</cffunction>
	<!---Function validates email fields--->
	<cffunction name="validateMail" access="private" output="true" returntype="string" >
	<cfargument type="string" required="true" name="field" />
	
		<cfif checkEmptyAndSpaces(field) >
			<cfreturn false>
		<cfelse>
			<cfset fieldValue = StructFind(form,arguments.field)>
			<cfset flag = isValid("email",fieldValue)>
		
			<cfif flag>
				<cfreturn false>
			<cfelse>
				<cfset generateErrors(field ,"Email address is not valid")>
				<cfreturn true>
			</cfif>
		</cfif>
	</cffunction>
	
	<!---Function valdates phone number fields--->
	
	<cffunction name="validateNumber" access="private" output="false" returntype="string" >
	<cfargument type="string" required="true" name="field" />
	
		<cfif checkEmptyAndSpaces(field) >
			<cfreturn true>
		<cfelse>
			<cfset fieldValue = StructFind(form,arguments.field)>
			<cfset flag = isValid("telephone",fieldValue)>
			<cfif NOT flag>
				<cfset generateErrors(field,"Phone number is not valid ")>
				<cfreturn true>
			<cfelse>
				<cfreturn false>
			</cfif>
		</cfif>
	</cffunction>
	
	<!---Function validates passwords--->
	<cffunction name="validatePass" access="private" output="false" returntype="string" >
		<cfargument type="string" required="true" name="field" />
	
		<cfif checkEmptyAndSpaces(field) >
			<cfreturn true>
		<cfelse>
			<cfset fieldValue = StructFind(form,arguments.field)>
			<cfif fieldValue NEQ form.user_password>
				<cfset #generateErrors(field)#>
				<cfreturn true>
			<cfelse>
				<cfreturn false>
			</cfif>
		</cfif>
	</cffunction>>

</cfcomponent>